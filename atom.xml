<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://daxinqqq.github.io</id>
    <title>逸空blog</title>
    <updated>2022-01-04T08:23:27.256Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://daxinqqq.github.io"/>
    <link rel="self" href="https://daxinqqq.github.io/atom.xml"/>
    <subtitle>三两老友七八老酒，十村踏遍一生还在</subtitle>
    <logo>https://daxinqqq.github.io/images/avatar.png</logo>
    <icon>https://daxinqqq.github.io/favicon.ico</icon>
    <rights>All rights reserved 2022, 逸空blog</rights>
    <entry>
        <title type="html"><![CDATA[tony数据脱敏框架]]></title>
        <id>https://daxinqqq.github.io/post/tony-shu-ju-tuo-min-kuang-jia/</id>
        <link href="https://daxinqqq.github.io/post/tony-shu-ju-tuo-min-kuang-jia/">
        </link>
        <updated>2022-01-04T08:17:23.000Z</updated>
        <content type="html"><![CDATA[<h2 id="1tony框架背景">1.tony框架背景</h2>
<ul>
<li>在京车会业务量日益剧增的背景下，大量数据在各种业务活动中产生，数据安全控制一直是治理的重要环节，数据脱敏属于安全控制的范畴。对互联网公司来说，数据安全一直是极为重视和敏感的话题。数据脱敏是指对某些敏感信息通过脱敏规则进行数据的变形，实现敏感隐私数据的可靠保护。涉及客户安全数据或者一些商业性敏感数据，如身份证号、手机号、卡号、客户号等个人信息按照相关部门规定，都需要进行数据脱敏。</li>
<li>在京车会现有的微服务技术架构背景下，敏感数据的使用存在如下痛点：
<ul>
<li><strong>敏感数据与PC、APP客户端使用明文数据交互，数据安全无法保证。</strong></li>
<li><strong>敏感数据浏览缺乏监控，无法针对性的做数据治理。</strong></li>
<li><strong>微服务架构系统应用多而杂，期望引入一套通用的方案统一解决敏感数据安全问题。</strong></li>
</ul>
</li>
</ul>
<p>基于以上痛点，tony提供了一套完整、安全、透明化、低改造成本的数据脱敏整合解决方案。</p>
<h2 id="2tony框架简介">2.tony框架简介</h2>
<p>Tony是一款敏感数据脱敏与浏览记录监控工具，可对系统中的敏感信息进行脱敏处理，并在泄漏时提供追溯依据，为企业数据共享、迁移、分发提供安全保护措施。该项目基于spring进行开发，提供spring-boot-starter启动包，接入简单，主要实现功能如下：</p>
<p>​	<strong>灵活的脱敏方案</strong></p>
<p>业务系统的数据千变万化，为确保所有业务数据都能够正常进行敏感信息处理，数据脱敏提供高灵活性的自定义脱敏配置。通过丰富多样的脱敏规则定义，敏感数据处理可实现高度契合业务的脱敏处理。</p>
<p>​	<strong>统一的明文数据管理</strong></p>
<p>框架内置敏感数据对应的明文数据管理流程，将明文数据统一缓存管理，提供统一的明文数据访问api。</p>
<p>​	<strong>浏览记录留痕</strong></p>
<p>针对不同用户对敏感信息明文数据的浏览动作，接入方可以自定义日志格式模版记录输出到日志文件中，做到每条数据的浏览有迹可循。</p>
<p>​	<strong>异常浏览量预警</strong></p>
<p>接入方通过自定义脱敏配置可以设置不同场景的敏感浏览明文数据量阈值，开启告警后，当用户访问明文数据次数到达阈值后，会触发预警流程，接入方可自定义预警逻辑。</p>
<h3 id="tony整体架构">tony整体架构：</h3>
<p>tony-core模块定义了基本的脱敏功能实现，整体流程采用spi机制预留了充分的扩展空间。以tony-core为底座，集成汽车现有技术栈提供了tony-transformers模块对基础的脱敏功能进行了扩展：异步的缓存事件分发，分布式明文数据缓存，对接集团安全部门的敏感日志留痕，异常浏览量的邮件预警。<br>
<img src="https://daxinqqq.github.io/post-images/1641284327860.png" alt="" loading="lazy"></p>
<table>
<thead>
<tr>
<th>name</th>
<th>desc</th>
</tr>
</thead>
<tbody>
<tr>
<td>MaskAnnotationProcessor</td>
<td>业务场景代理，通过注解代理对应的脱敏场景方法。</td>
</tr>
<tr>
<td>IMaskProcess</td>
<td>数据脱敏处理器</td>
</tr>
<tr>
<td>IMaskLogProcessor</td>
<td>数据浏览日志处理器</td>
</tr>
<tr>
<td>IMaskCacheProcessor</td>
<td>明文数据缓存处理器</td>
</tr>
<tr>
<td>IMaskLimitProcessor</td>
<td>明文数据访问限额管理</td>
</tr>
<tr>
<td>IMaskWarningProcessor</td>
<td>异常浏览预警处理</td>
</tr>
<tr>
<td>IMaskContent</td>
<td>上下文信息处理器</td>
</tr>
<tr>
<td>IUnMaskProcessor</td>
<td>明文数据获取处理器</td>
</tr>
<tr>
<td>DefaultUnMaskProcessorAdapter</td>
<td>明文数据获取适配器，提供从缓存中获取明文数据功能。</td>
</tr>
<tr>
<td>DefaultMaskCacheProcess</td>
<td>明文数据缓存处理器，提供分布式缓存功能。</td>
</tr>
<tr>
<td>DefaultMaskContent</td>
<td>上下文信息处理器，提供ThreadLocal实现。</td>
</tr>
<tr>
<td>DefaultMaskWarningProcessor</td>
<td>异常浏览预警处理，提供邮件告警实现。</td>
</tr>
<tr>
<td>PlaintextProcess</td>
<td>明文属于获取接口约束，可自定义明文数据获取的扩展。</td>
</tr>
<tr>
<td>MaskMonitorCacheHandle</td>
<td>缓存时间消费，异步消费缓存事件，存储明文数据。</td>
</tr>
</tbody>
</table>
<h3 id="tony处理流程详解">tony处理流程详解：</h3>
<p>tony和业务代码部署在一起，接入应用通过脱敏场景与脱敏配置项的指定来实现对应业务场景的脱敏代理。业务代码只需配置场景注解即可兼容使用。此时敏感数据的脱敏工作由tony负责，tony会拦截业务场景的响应数据，对敏感信息进行脱敏处理。</p>
<figure data-type="image" tabindex="1"><img src="https://daxinqqq.github.io/post-images/1641284364442.png" alt="" loading="lazy"></figure>
<h3 id="tony脱敏配置详解">tony脱敏配置详解：</h3>
<p>脱敏配置主要分为四部分：脱敏上下文配置，脱敏场景配置，脱敏预警配置以及日志留痕模版，其详情如下图所示：</p>
<figure data-type="image" tabindex="2"><img src="https://daxinqqq.github.io/post-images/1641284388459.png" alt="" loading="lazy"></figure>
<table>
<thead>
<tr>
<th>key</th>
<th>name</th>
<th>desc</th>
</tr>
</thead>
<tbody>
<tr>
<td>tony.appName</td>
<td>接入系统名称</td>
<td></td>
</tr>
<tr>
<td>tony.maskSourceName</td>
<td>脱敏白名单</td>
<td>控制统一场景的接口对不同调用方进行数据是否脱敏控制</td>
</tr>
<tr>
<td>tony.mask.XXX</td>
<td>脱敏场景</td>
<td>XXX为具体场景的key</td>
</tr>
<tr>
<td>tony.mask.XXX.enable</td>
<td>动态开关</td>
<td>控制是否开启脱敏</td>
</tr>
<tr>
<td>tony.mask.XXX.limits</td>
<td>明文浏览限额</td>
<td>限制明文浏览次数</td>
</tr>
<tr>
<td>tony.mask.XXX.cacheKey</td>
<td>数据缓存解析规则</td>
<td>示例：STATEMENT_BILL_PAGE:${argItem.id}</td>
</tr>
<tr>
<td>tony.types.YYY</td>
<td>脱敏字段</td>
<td>YYY为具体字段的key</td>
</tr>
<tr>
<td>tony.types.YYY.regex</td>
<td>脱敏规则配置</td>
<td>脱敏的正则表达式 示例：(\d{3})\d{4}(\d{4})</td>
</tr>
<tr>
<td>tony.types.YYY.replacement</td>
<td>脱敏规则配置</td>
<td>脱敏的正则表达式 示例：$1****$2</td>
</tr>
<tr>
<td>tony.types.YYY.logName</td>
<td>日志字段名称</td>
<td></td>
</tr>
</tbody>
</table>
<h2 id="3-系统详细设计">3. 系统详细设计</h2>
<h2 id="31-详细设计">3.1 详细设计</h2>
<h3 id="311-活动图">3.1.1 活动图</h3>
<figure data-type="image" tabindex="3"><img src="https://daxinqqq.github.io/post-images/1641284436912.png" alt="" loading="lazy"></figure>
<h3 id="312-时序图">3.1.2 时序图</h3>
<figure data-type="image" tabindex="4"><img src="https://daxinqqq.github.io/post-images/1641284473212.png" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="5"><img src="https://daxinqqq.github.io/post-images/1641284493564.png" alt="" loading="lazy"></figure>
<h3 id="313-类图">3.1.3 类图</h3>
<figure data-type="image" tabindex="6"><img src="https://daxinqqq.github.io/post-images/1641284521364.png" alt="" loading="lazy"></figure>
<table>
<thead>
<tr>
<th>包</th>
<th>职责</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>com.jd.car.tony.annoation</strong></td>
<td>注解层 负责声明要被代理的业务操作。</td>
</tr>
<tr>
<td><strong>com.jd.car.tony.limit</strong></td>
<td>负责记录敏感数据的访问次数，并提供预警。</td>
</tr>
<tr>
<td><strong>com.jd.car.tony.mask</strong></td>
<td>管理基础配置，并根据配置进行敏感数据遮盖脱敏。</td>
</tr>
<tr>
<td><strong>com.jd.car.tony.log</strong></td>
<td>记录敏感数据的访问操作，输出统一格式的日志信息。</td>
</tr>
<tr>
<td><strong>com.jd.car.tony.unmask</strong></td>
<td>提供敏感数据的明文信息查看功能。</td>
</tr>
<tr>
<td><strong>com.jd.car.tony.support</strong></td>
<td>util包，负责全局功能的支持。</td>
</tr>
</tbody>
</table>
<h2 id="4-接入使用">4. 接入使用</h2>
<h4 id="41-引入坐标">4.1 引入坐标</h4>
<pre><code class="language-xml">					&lt;dependency&gt;
                &lt;groupId&gt;com.jd.car&lt;/groupId&gt;
                &lt;artifactId&gt;tony-spring-boot-starter&lt;/artifactId&gt;
                &lt;version&gt;1.1-SNAPSHOT&lt;/version&gt;
            &lt;/dependency&gt;
</code></pre>
<h4 id="42-yaml配置">4.2 yaml配置</h4>
<pre><code class="language-yaml">tony:
  appName: &quot;appName&quot;
  #鉴权信息key
  sessionName: &quot;&quot;
  systemName: &quot;systemName&quot;
  warningName: &quot;京车会&quot;
  #脱敏白名单
  maskSourceName: &quot;&quot;
  types:
    name:
      regex: &quot;([\\u4e00-\\u9fa5a-z0-9]{1})[\\u4e00-\\u9fa5a-z0-9]+&quot;
      replacement: &quot;$1**&quot;
      logName: &quot;accountName&quot;
  mask:
    order:
      enable: true
      limits: 100
      limitError: false
      cacheKey: &quot;order:${argItem.id}&quot;
      menuName: &quot;场景名称&quot;
      name: &quot;order&quot;
      #日志记录操作类型
      maskLogOp: &quot;&quot;
      maskLogAccountType: 3
      
   #预警邮箱设置
   mail:
    mailHost: 
    mailPort: 
    mailUser: 
    mailPwd: 
    mailFrom: 
    mailTo: 
    copyto: 
    sendFlag: 
    
 #异步事件缓存明文数据配置，分布式缓存
 jd:
  cache:
    jimdb:
      enable: false
      url: ''
  event:
    enable: true
    queue:
      # 自定义queue名字，例如monitorQueue
      maskMonitorQueue:
        retryCount: 3
        maxBakSize: 1000
        # monitorHandle 处理事件的beanName
        handlerBean: maskMonitorCacheHandle 
</code></pre>
<h4 id="43-日志文件配置">4.3 日志文件配置</h4>
<pre><code class="language-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;configuration scan=&quot;true&quot; scanPeriod=&quot;60 seconds&quot; debug=&quot;false&quot;&gt;

    &lt;contextName&gt;demo&lt;/contextName&gt;
    &lt;!-- 日志最大的历史 单位：天 --&gt;
    &lt;property name=&quot;maxHistory&quot; value=&quot;90&quot;/&gt;

    &lt;property name=&quot;LOG_PATTERN&quot;
              value=&quot;%d{yyyy-MM-dd HH:mm:ss.SSS,GMT+8:00} -%5p ${PID:- } --- [%X{PFTID}][%t] %-40.40logger{39}[%L] : %m%n&quot;/&gt;

    &lt;property name=&quot;LOG_CHARSET&quot; value=&quot;UTF-8&quot;/&gt;

    &lt;property name=&quot;LOG_DES_PATTERN&quot; value=&quot;%msg%n&quot; /&gt;

    &lt;!-- 彩色日志依赖的渲染类 --&gt;
    &lt;conversionRule conversionWord=&quot;clr&quot; converterClass=&quot;org.springframework.boot.logging.logback.ColorConverter&quot;/&gt;
    &lt;conversionRule conversionWord=&quot;wex&quot;
                    converterClass=&quot;org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter&quot;/&gt;
    &lt;conversionRule conversionWord=&quot;wEx&quot;
                    converterClass=&quot;org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter&quot;/&gt;

    &lt;property name=&quot;LOG_PATTERN&quot;
              value=&quot;%d{yyyy-MM-dd HH:mm:ss.SSS,GMT+8:00} -%5p ${PID:- } --- [%X{PFTID}][%t] %-40.40logger{39}[%L] : %m%n&quot;/&gt;

    &lt;!-- 彩色日志格式 --&gt;
    &lt;property name=&quot;CONSOLE_LOG_PATTERN&quot;
              value=&quot;${CONSOLE_LOG_PATTERN:-%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%X{PFTID}][%15.15t]){faint} %clr(%-40.40logger{39}[%L]){cyan} %clr(:){faint} %m%n}&quot;/&gt;


    &lt;appender name=&quot;mask&quot; class=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt;
        &lt;file&gt;${log.path}/today_log/mask.log&lt;/file&gt;
        &lt;filter class=&quot;ch.qos.logback.classic.filter.ThresholdFilter&quot;&gt;
            &lt;level&gt;INFO&lt;/level&gt;
        &lt;/filter&gt;
        &lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&gt;
            &lt;fileNamePattern&gt;${log.path}/history_logs/mask-%d{yyyy-MM-dd}.log&lt;/fileNamePattern&gt;
            &lt;maxHistory&gt;30&lt;/maxHistory&gt;
        &lt;/rollingPolicy&gt;
        &lt;encoder&gt;
            &lt;charset&gt;${LOG_CHARSET}&lt;/charset&gt;
            &lt;pattern&gt;${LOG_DES_PATTERN}&lt;/pattern&gt;
        &lt;/encoder&gt;
    &lt;/appender&gt;
    &lt;logger name=&quot;com.jd.car.tony.log.DefaultMaskLogProcessor&quot; additivity=&quot;false&quot;&gt;
        &lt;level value=&quot;INFO&quot; /&gt;
        &lt;appender-ref ref=&quot;mask&quot; /&gt;
    &lt;/logger&gt;

&lt;/configuration&gt;
</code></pre>
<h4 id="43-场景接入">4.3 场景接入</h4>
<pre><code class="language-java"> /**
     * 测试脱敏
     *
     * @return
     */
    @RequestMapping(&quot;test&quot;)
    @MaskMethod(&quot;order&quot;)
    public DemoResult test(AuthInfoBO authInfo) {
        return new DemoResult();
    }

    /**
     * 测试脱敏
     *
     * @return
     */
    @RequestMapping(&quot;test-list&quot;)
    @MaskMethod(&quot;order&quot;)
    public List&lt;DemoResult&gt; testList(AuthInfoBO authInfo) {
        List&lt;DemoResult&gt; objects = Lists.newArrayList();
        objects.add(new DemoResult());
        objects.add(new DemoResult());
        return objects;
    }

 		@Autowired
    private IUnMaskProcessor unMaskProcessorProxy;

    /**
     * 测试反脱敏
     *
     * @return
     */
    @RequestMapping(&quot;unmask&quot;)
    public Map testUnMask(@RequestBody UnMaskRequest unMaskRequest, AuthInfoBO authInfo) {
        return unMaskProcessorProxy.unMask(unMaskRequest, authInfo);
    }
</code></pre>
<h4 id="43-脱敏字段配置">4.3 脱敏字段配置</h4>
<pre><code class="language-java">@Data
public class DemoResult {

    @Mask(type = &quot;name&quot;)
    private String userName = &quot;jajajaasjcij&quot;;

    @Mask(type = &quot;phone&quot;)
    private String userTel = &quot;18911112222&quot;;

    private Long orderId = 1L;

}
</code></pre>
<h4 id="44-业务监控">4.4 业务监控</h4>
<table>
<thead>
<tr>
<th style="text-align:left">业务监控点</th>
<th style="text-align:left">触发逻辑</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">敏感数据明文查看</td>
<td style="text-align:left">单账号、单日、单接口访问次数到达访问限额时，则发送邮件给权限管理人员。</td>
</tr>
<tr>
<td style="text-align:left">敏感数据查询日志</td>
<td style="text-align:left">敏感数据脱敏后、明文数据查看时，按集团要求格式单独记录到日志文件中。</td>
</tr>
</tbody>
</table>
<h2 id="5-tony现状与规划">5. tony现状与规划</h2>
<p>Tony数据脱敏框架接入简单，可灵活配置完成不同业务场景的敏感数据脱敏需求，解决了与客户端使用明文数据交互，数据安全的问题。并且接入数据浏览监控功能，为数据治理预留入口。引入了明文数据缓存功能，节省了明文数据查询的二次开发工作。目前已全面接入京车会商户系统并上线正式使用。预计后续将推广到整个生活服务事业群。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[对比Java标准NIO库，Netty如何实现更高性能？]]></title>
        <id>https://daxinqqq.github.io/post/dui-bi-java-biao-zhun-nio-ku-netty-ru-he-shi-xian-geng-gao-xing-neng/</id>
        <link href="https://daxinqqq.github.io/post/dui-bi-java-biao-zhun-nio-ku-netty-ru-he-shi-xian-geng-gao-xing-neng/">
        </link>
        <updated>2021-03-12T09:43:57.000Z</updated>
        <content type="html"><![CDATA[<p>从性能角度，Netty在基础的NIO等类库上进行了很多改进：</p>
<ul>
<li>更优雅的Reactor模式实现、灵活的线程模型、利用EventLoop等创新性的机制可以非常高效的管理成百上千的Channel。</li>
<li>充分利用了Java的Zero-Copy机制，并且从多角度降低内存分配和回收的开销。例如，使用池化的Direct Buffer等技术，提高IO性能的同时，减少了对象的创建和销毁；利用反射等技术直接操纵SelectionKey，使用数组而非Java容器等。</li>
<li>使用更多本地代码。例如，直接利用JNI调用OPEN SSL等方式，获得比Java内建SSL引擎更好的性能。</li>
<li>在通信协议，序列化等其他角度的优化。</li>
</ul>
<p>总结，Netty并没有Java核心类库那些强烈的通用性、跨平台等各种负担，针对性能等特定目标和Linux等特定环境，采取了一些极致的优化手段。</p>
<h2 id="扩展">扩展：</h2>
<h3 id="netty">Netty:</h3>
<p>​	Netty是一个异步的，基于事件Client/Server的网络框架，目标是提供一种简单、快速构建网络应用的方式，同时保证高吞吐量、低延时、高可靠性。</p>
<h3 id="与java-nio框架对比">与Java NIO框架对比：</h3>
<p>​	Java的标准类库，由于其基础性、通用性的定位，往往更关注于技术模型上的抽象，而不是从一线开发者角度思考。Java NIO的设计也是，开发者需要深入掌握线程、IO、网络等相关概念，学习、开发成本大。</p>
<p>​	Netty通过精巧设计的事件机制，将业务逻辑与无关技术逻辑进行隔离，并通过抽象，一定程度的填补了基础平台和业务开发的鸿沟，更有利于最佳实践的普及。</p>
<p>除了核心的事件机制，Netty还提供了其他的功能：</p>
<ul>
<li>从网络协议的角度，Netty除了支持传输层的UDP、TCP、SCTP协议，也支持HTTP(S)、WebSocket等多种应用层协议，并不是单一协议的API。</li>
<li>在应用中，需要将数据从Java对象转换成各种应用的数据格式，或者进行反向转换，Netty提供了一系列扩展的编解码框架，与应用场景无缝衔接，并且性能良好。</li>
<li>它扩展了Java NIO Buffer，提供了自己的ByteBuf实现，并且深度支持Direct Buffer等技术，甚至hack了Java内部对Direct Buffer的分配和销毁等。同时，Netty也提供了更加完善的Scatter/Gather机制实现。</li>
</ul>
<p>可以看到，Netty的能力范围大大超过了Java核心类库中的NIO等API，可以说是一个从应用视角出发的产物。</p>
<h3 id="netty入门代码浅析">Netty入门代码浅析：</h3>
<figure data-type="image" tabindex="1"><img src="https://daxinqqq.github.io/post-images/1615542476300.png" alt="" loading="lazy"></figure>
<ul>
<li><strong>ServerBootstrap</strong>：服务器端程序的入口，这是Netty为简化网络程序配置和关闭等生命周期管理，所引入的Bootstrapping机制。通常我们要做的创建Channel、绑定端口、注册Handler等，都可以通过这个统一的入口，以Fluent API等形式完成，简化了API使用。与之对应，Bootstrap则是客户端的入口。</li>
<li><strong>Channel</strong>：作为一个基于NIO的扩展框架，Channel和Selector等概念仍然是Netty的基础组件，但是针对应用开发需求，提供了相对易用的抽象。</li>
<li><strong>EventLoop</strong>：这是Netty处理事件的核心机制。例子使用了EventLoopGroup。在NIO中通常要做的几件事，如注册感兴趣的事件，调度相应的Handler等，都是EventLoop负责。</li>
<li><strong>ChannelFuture</strong>：这是Netty实现异步IO的基础之一，保证了同一个Channel操作的调用顺序。Netty扩展了Java标准的Future，提供了针对自己场景特有的Future定义。</li>
<li><strong>ChannelHandler</strong>：这是应用开发者<strong>放置业务逻辑的主要地方</strong>。</li>
<li><strong>ChannelPipeline</strong>：它是ChannelHandler链条的容器，每个Channel创建后，自动被分配到一个ChannelPipeline。在上面的代码中，通过ServerBootstrap注册了ChannelInitializer，并且实现了initChannel方法，在该方法中承担了向ChannelPipeline安装其他Channel的任务。</li>
</ul>
<p><strong>可以参考下图，忽略InBound/OutBound Handler的细节，理解这几个基本单元的操作流程和对应关系：</strong><br>
<img src="https://daxinqqq.github.io/post-images/1615542389163.png" alt="" loading="lazy"></p>
<p>对比Java标准NIO的代码，Netty提供了相对高层次的封装，减少了对Selector等细节的操作，而EventLoop、Pipeline等机制简化了编程模型，开发者不用担心并发等问题，一定程度上简化了应用代码的开发。并且这一切并没有以可靠性、可扩展性为代价，反而将其大幅度提高。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[MySQL数据库设计开发规范]]></title>
        <id>https://daxinqqq.github.io/post/mysql-shu-ju-ku-she-ji-kai-fa-gui-fan/</id>
        <link href="https://daxinqqq.github.io/post/mysql-shu-ju-ku-she-ji-kai-fa-gui-fan/">
        </link>
        <updated>2021-03-11T10:45:07.000Z</updated>
        <content type="html"><![CDATA[<h2 id="1-规范背景与目的"><strong>1. 规范背景与目的</strong></h2>
<p>MySQL数据库与 Oracle、 SQL Server 等数据库相比，有其内核上的优势与劣势。我们在使用MySQL数据库的时候需要遵循一定规范，扬长避短。本规范旨在帮助或指导RD、QA、OP等技术人员做出适合线上业务的数据库设计。在数据库变更和处理流程、数据库表设计、SQL编写等方面予以规范，从而为公司业务系统稳定、健康地运行提供保障。</p>
<h2 id="2-设计规范"><strong>2. 设计规范</strong></h2>
<h3 id="21-数据库设计"><strong>2.1 数据库设计</strong></h3>
<p>以下所有规范会按照【高危】、【强制】、【建议】三个级别进行标注，遵守优先级从高到低。<br>
对于不满足【高危】和【强制】两个级别的设计，DBA会强制打回要求修改。</p>
<h3 id="211-库名"><strong>2.1.1 库名</strong></h3>
<ol>
<li>【强制】库的名称必须控制在32个字符以内，相关模块的表名与表名之间尽量提现join的关系，如user表和user_login表。</li>
<li>【强制】库的名称格式：业务系统名称_子系统名，同一模块使用的表名尽量使用统一前缀。</li>
<li>【强制】一般分库名称命名格式是库通配名_编号，编号从0开始递增，比如db_goods _001以时间进行分库的名称格式是&quot;库通配名_时间&quot;</li>
<li>【强制】创建数据库时必须显式指定字符集，并且字符集只能是utf8或者utf8mb4。创建数据库SQL举例：create database db1 default character set utf8;。</li>
</ol>
<h3 id="212-表结构"><strong>2.1.2 表结构</strong></h3>
<ol>
<li>【强制】表和列的名称必须控制在32个字符以内，表名只能使用字母、数字和下划线，一律小写。</li>
<li>【强制】表名要求模块名强相关，如师资系统采用&quot;sz&quot;作为前缀，渠道系统采用&quot;qd&quot;作为前缀等。</li>
<li>【强制】创建表时必须显式指定字符集为utf8或utf8mb4。</li>
<li>【强制】创建表时必须显式指定表存储引擎类型，如无特殊需求，一律为InnoDB。当需要使用除InnoDB/MyISAM/Memory以外的存储引擎时，必须通过DBA审核才能在生产环境中使用。因为Innodb表支持事务、行锁、宕机恢复、MVCC等关系型数据库重要特性，为业界使用最多的MySQL存储引擎。而这是其他大多数存储引擎不具备的，因此首推InnoDB。</li>
<li>【强制】建表必须有comment</li>
<li>【建议】建表时关于主键：(1)强制要求主键为id，类型为int或bigint，且为auto_increment(2)，建议设为其他字段如user_id，order_id建立unique key索引。因为如果设为主键且主键值为随机插入，则会导致innodb内部page分裂和大量随机I/O，性能下降。</li>
<li>【强制】核心表（如用户表，金钱相关的表）必须有行数据的创建时间字段create_time和最后更新时间字段update_time，便于查问题。</li>
<li>【建议】表中所有字段必须都是NOT NULL属性，业务可以根据需要定义DEFAULT值。因为使用NULL值会存在每一行都会占用额外存储空间、数据迁移容易出错、聚合函数计算结果偏差等问题。</li>
<li>【建议】建议对表里的blob、text等大字段，垂直拆分到其他表里，仅在需要读这些对象的时候才去select。</li>
<li>【建议】反范式设计：把经常需要join查询的字段，在其他表里冗余一份。如user_name属性在user_account，user_login_log等表里冗余一份，减少join查询。</li>
<li>【强制】中间表用于保留中间结果集，名称必须以tmp_开头。备份表用于备份或抓取源表快照，名称必须以bak_开头。中间表和备份表定期清理。</li>
<li>【强制】对于超过100W行的大表进行alter table，必须经过DBA审核，并在业务低峰期执行。因为alter table会产生表锁，期间阻塞对于该表的所有写入，对于业务可能会产生极大影响。</li>
</ol>
<h3 id="213-列数据类型优化"><strong>2.1.3 列数据类型优化</strong></h3>
<ol>
<li>【建议】表中的自增列（auto_increment属性），推荐使用bigint类型。因为无符号int存储范围为-2147483648~2147483647（大约21亿左右），溢出后会导致报错。</li>
<li>【建议】业务中选择性很少的状态status、类型type等字段推荐使用tinytint或者smallint类型节省存储空间。</li>
<li>【建议】业务中IP地址字段推荐使用int类型，不推荐用char(15)。因为int只占4字节，可以用如下函数相互转换，而char(15)占用至少15字节。一旦表数据行数到了1亿，那么要多用1.1G存储空间。 SQL：select inet_aton('192.168.2.12'); select inet_ntoa(3232236044); PHP: ip2long('192.168.2.12'); long2ip(3530427185);</li>
<li>【建议】不推荐使用enum，set。 因为它们浪费空间，且枚举值写死了，变更不方便。推荐使用tinyint或smallint。</li>
<li>【建议】不推荐使用blob，text等类型。它们都比较浪费硬盘和内存空间。在加载表数据时，会读取大字段到内存里从而浪费内存空间，影响系统性能。建议和PM、RD沟通，是否真的需要这么大字段。Innodb中当一行记录超过8098字节时，会将该记录中选取最长的一个字段将其768字节放在原始page里，该字段余下内容放在overflow-page里。不幸的是在compact行格式下，原始page和overflow-page都会加载。</li>
<li>【强制】存储金钱的字段，强制使用decimal类型。</li>
<li>【建议】文本数据尽量用varchar存储。因为varchar是变长存储，比char更省空间。MySQL server层规定一行所有文本最多存65535字节，因此在utf8字符集下最多存21844个字符，超过会自动转换为mediumtext字段。而text在utf8字符集下最多存21844个字符，mediumtext最多存2<sup>24/3个字符，longtext最多存2</sup>32个字符。一般建议用varchar类型，字符数不要超过2700。</li>
<li>【建议】时间类型尽量选取timestamp。因为datetime占用8字节，timestamp仅占用4字节，但是范围为1970-01-01 00:00:01到2038-01-01 00:00:00。更为高阶的方法，选用int来存储时间，使用SQL函数unix_timestamp()和from_unixtime()来进行转换。</li>
</ol>
<p>详细存储大小参加下图：<br>
<img src="https://cf.jd.com/download/attachments/222235418/worddav383b50cba105e8be3ca04216dba26386.png?version=1&amp;modificationDate=1571024595000&amp;api=v2" alt="img" loading="lazy"></p>
<h3 id="214-索引设计"><strong>2.1.4 索引设计</strong></h3>
<ol>
<li>【强制】InnoDB表必须主键为id int/bigint auto_increment,且主键值禁止被更新。</li>
<li>【建议】主键的名称以&quot;pk_&quot;开头，唯一键以&quot;uk_&quot;或&quot;uq_&quot;开头，普通索引以&quot;idx_&quot;开头，一律使用小写格式，以表名/字段的名称或缩写作为后缀。</li>
<li>【强制】InnoDB和MyISAM存储引擎表，索引类型必须为BTREE；MEMORY表可以根据需要选择HASH或者BTREE类型索引。</li>
<li>【强制】单个索引中每个索引记录的长度不能超过64KB。</li>
<li>【建议】单个表上的索引个数不能超过7个。</li>
<li>【建议】在建立索引时，多考虑建立联合索引，并把区分度最高的字段放在最前面。如列userid的区分度可由select count(distinct userid)计算出来。</li>
<li>【建议】在多表join的SQL里，保证被驱动表的连接列上有索引，这样join执行效率最高。</li>
<li>【建议】建表或加索引时，保证表里互相不存在冗余索引。对于MySQL来说，如果表里已经存在key(a,b)，则key(a)为冗余索引，需要删除。</li>
</ol>
<h3 id="215-分库分表-分区表"><strong>2.1.5 分库分表、分区表</strong></h3>
<ol>
<li>【强制】分区表的分区字段（partition-key）必须有索引，或者是组合索引的首列。</li>
<li>【强制】单个分区表中的分区（包括子分区）个数不能超过1024。</li>
<li>【强制】上线前RD或者DBA必须指定分区表的创建、清理策略。</li>
<li>【强制】访问分区表的SQL必须包含分区键。</li>
<li>【建议】单个分区文件不超过2G，总大小不超过50G。建议总分区数不超过20个。</li>
<li>【强制】对于分区表执行alter table操作，必须在业务低峰期执行。</li>
<li>【强制】采用分库策略的，库的数量不能超过1024</li>
<li>【强制】采用分表策略的，表的数量不能超过4096</li>
<li>【建议】单个分表不超过500W行，ibd文件大小不超过2G，这样才能让数据分布式变得性能更佳。</li>
<li>【建议】水平分表尽量用取模方式，日志、报表类数据建议采用日期进行分表。</li>
</ol>
<h3 id="216-字符集"><strong>2.1.6 字符集</strong></h3>
<ol>
<li>【强制】数据库本身库、表、列所有字符集必须保持一致，为utf8或utf8mb4。</li>
<li>【强制】前端程序字符集或者环境变量中的字符集，与数据库、表的字符集必须一致，统一为utf8。</li>
</ol>
<h3 id="217-程序层dao设计建议"><strong>2.1.7 程序层DAO设计建议</strong></h3>
<ol>
<li>【建议】新的代码不要用model，推荐使用手动拼SQL+绑定变量传入参数的方式。因为model虽然可以使用面向对象的方式操作db，但是其使用不当很容易造成生成的SQL非常复杂，且model层自己做的强制类型转换性能较差，最终导致数据库性能下降。</li>
<li>【建议】前端程序连接MySQL或者redis，必须要有连接超时和失败重连机制，且失败重试必须有间隔时间。</li>
<li>【建议】前端程序报错里尽量能够提示MySQL或redis原生态的报错信息，便于排查错误。</li>
<li>【建议】对于有连接池的前端程序，必须根据业务需要配置初始、最小、最大连接数，超时时间以及连接回收机制，否则会耗尽数据库连接资源，造成线上事故。</li>
<li>【建议】对于log或history类型的表，随时间增长容易越来越大，因此上线前RD或者DBA必须建立表数据清理或归档方案。</li>
<li>【建议】在应用程序设计阶段，RD必须考虑并规避数据库中主从延迟对于业务的影响。尽量避免从库短时延迟（20秒以内）对业务造成影响，建议强制一致性的读开启事务走主库，或更新后过一段时间再去读从库。</li>
<li>【建议】多个并发业务逻辑访问同一块数据（innodb表）时，会在数据库端产生行锁甚至表锁导致并发下降，因此建议更新类SQL尽量基于主键去更新。</li>
<li>【建议】业务逻辑之间加锁顺序尽量保持一致，否则会导致死锁。</li>
<li>【建议】对于单表读写比大于10:1的数据行或单个列，可以将热点数据放在缓存里（如mecache或redis），加快访问速度，降低MySQL压力。</li>
</ol>
<h3 id="218-一个规范的建表语句示例"><strong>2.1.8 一个规范的建表语句示例</strong></h3>
<p>一个较为规范的建表语句为：<br>
CREATE TABLE tt_test_user_1225_bk (<br>
<code>id</code> bigint(11) NOT NULL AUTO_INCREMENT COMMENT '主键id',<br>
<code>user_id</code> bigint(11) NOT NULL COMMENT '用户id',<br>
<code>username</code> varchar(45) NOT NULL COMMENT '真实姓名',<br>
<code>email</code> varchar(30) NOT NULL COMMENT '用户邮箱',<br>
<code>nickname</code> varchar(45) NOT NULL COMMENT '昵称',<br>
<code>avatar</code> int(11) NOT NULL COMMENT '头像',<br>
<code>birthday</code> date NOT NULL COMMENT '生日',<br>
<code>sex</code> tinyint(4) DEFAULT '0' COMMENT '性别',<br>
<code>short_introduce</code> varchar(150) DEFAULT NULL COMMENT '一句话介绍自己，最多50个汉字',<br>
<code>user_resume</code> varchar(300) NOT NULL COMMENT '用户提交的简历存放地址',<br>
<code>user_register_ip</code> int NOT NULL COMMENT '用户注册时的源ip',<br>
<code>create_time</code> timestamp NULL DEFAULT CURRENT_TIMESTAMP COMMENT '用户记录创建的时间',<br>
<code>update_time</code> timestamp NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '用户资料修改的时间',<br>
<code>user_review_status</code> tinyint NOT NULL COMMENT '用户资料审核状态，1为通过，2为审核中，3为未通过，4为还未提交审核',<br>
PRIMARY KEY (<code>id</code>),<br>
UNIQUE KEY <code>uq_idx_user_id</code> (<code>user_id</code>),<br>
KEY <code>idx_username</code>(<code>username</code>),<br>
KEY <code>idx_create_time</code>(<code>create_time</code>,<code>user_review_status</code>)<br>
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='网站用户基本信息';</p>
<h2 id="22-sql编写"><strong>2.2 SQL编写</strong></h2>
<h3 id="221-dml语句"><strong>2.2.1 DML语句</strong></h3>
<ol>
<li>【强制】SELECT语句必须指定具体字段名称，禁止写成*。因为select *会将不该读的数据也从MySQL里读出来，造成网卡压力。且表字段一旦更新，但model层没有来得及更新的话，系统会报错。</li>
<li>【强制】insert语句指定具体字段名称，不要写成insert into t1 values(…)，道理同上。</li>
<li>【建议】insert into…values(XX),(XX),(XX)…。这里XX的值不要超过5000个。值过多虽然上线很很快，但会引起主从同步延迟。</li>
<li>【建议】SELECT语句不要使用UNION，推荐使用UNION ALL，并且UNION子句个数限制在5个以内。因为union all不需要去重，节省数据库资源，提高性能。</li>
<li>【建议】in值列表限制在500以内。例如select… where userid in(….500个以内…)，这么做是为了减少底层扫描，减轻数据库压力从而加速查询。</li>
<li>【建议】事务里批量更新数据需要控制数量，进行必要的sleep，做到少量多次。</li>
<li>【强制】事务涉及的表必须全部是innodb表。否则一旦失败不会全部回滚，且易造成主从库同步中断。</li>
<li>【强制】写入和事务发往主库，只读SQL发往从库。</li>
<li>【强制】除静态表或小表（100行以内），DML语句必须有where条件，且使用索引查找。</li>
<li>【强制】生产环境禁止使用hint，如sql_no_cache，force index，ignore key，straight join等。因为hint是用来强制SQL按照某个执行计划来执行，但随着数据量变化我们无法保证自己当初的预判是正确的，因此我们要相信MySQL优化器！</li>
<li>【强制】where条件里等号左右字段类型必须一致，否则无法利用索引。</li>
<li>【建议】SELECT|UPDATE|DELETE|REPLACE要有WHERE子句，且WHERE子句的条件必需使用索引查找。</li>
<li>【强制】生产数据库中强烈不推荐大表上发生全表扫描，但对于100行以下的静态表可以全表扫描。查询数据量不要超过表行数的25%，否则不会利用索引。</li>
<li>【强制】WHERE 子句中禁止只使用全模糊的LIKE条件进行查找，必须有其他等值或范围查询条件，否则无法利用索引。</li>
<li>【建议】索引列不要使用函数或表达式，否则无法利用索引。如where length(name)='Admin'或where user_id+2=10023。</li>
<li>【建议】减少使用or语句，可将or语句优化为union，然后在各个where条件上建立索引。如where a=1 or b=2优化为where a=1… union …where b=2, key(a),key(b)(a和b为非主键列)。</li>
<li>【建议】分页查询，当limit起点较高时，可先用过滤条件进行过滤。如select a,b,c from t1 limit 10000,20;优化为: select a,b,c from t1 where id&gt;10000 limit 20;。</li>
</ol>
<h3 id="222-多表连接"><strong>2.2.2 多表连接</strong></h3>
<ol>
<li>【强制】禁止跨db的join语句。因为这样可以减少模块间耦合，为数据库拆分奠定坚实基础。</li>
<li>【强制】禁止在业务的更新类SQL语句中使用join，比如update t1 join t2…。</li>
<li>【建议】不建议使用子查询，建议将子查询SQL拆开结合程序多次查询，或使用join来代替子查询。</li>
<li>【强制】线上环境，禁止多表join。</li>
<li>【建议】多表连接查询推荐使用别名，且SELECT列表中要用别名引用字段，数据库.表格式，如select a from db1.table1 alias1 where …。</li>
<li>【建议】在多表join中，尽量选取结果集较小的表作为驱动表，来join其他表。</li>
</ol>
<h3 id="223-事务"><strong>2.2.3 事务</strong></h3>
<ol>
<li>【建议】事务中INSERT|UPDATE|DELETE|REPLACE语句操作的行数控制在2000以内，以及WHERE子句中IN列表的传参个数控制在500以内。</li>
<li>【建议】批量操作数据时，需要控制事务处理间隔时间，进行必要的sleep，一般建议值5-10秒。</li>
<li>【建议】对于有auto_increment属性字段的表的插入操作，并发需要控制在200以内。</li>
<li>【强制】程序设计必须考虑&quot;数据库事务隔离级别&quot;带来的影响，包括脏读、不可重复读和幻读。线上建议事务隔离级别为repeatable-read。</li>
<li>【建议】事务里包含SQL不超过5个（支付业务除外）。因为过长的事务会导致锁数据较久，MySQL内部缓存、连接消耗过多等雪崩问题。</li>
<li>【建议】事务里更新语句尽量基于主键或unique key，如update … where id=XX; 否则会产生 间隙锁，内部扩大锁定范围，导致系统性能下降，产生死锁。</li>
<li>【建议】尽量把一些典型外部调用移出事务，如调用webservice，访问文件存储等，从而避免事务过长。</li>
<li>【建议】对于MySQL主从延迟严格敏感的select语句，请开启事务强制访问主库。</li>
</ol>
<h3 id="224-排序和分组"><strong>2.2.4 排序和分组</strong></h3>
<ol>
<li>【建议】减少使用order by，和业务沟通能不排序就不排序，或将排序放到程序端去做。order by、group by、distinct这些语句较为耗费CPU，数据库的CPU资源是极其宝贵的。</li>
<li>【建议】order by、group by、distinct这些SQL尽量利用索引直接检索出排序好的数据。如where a=1 order by可以利用key(a,b)。</li>
<li>【建议】包含了order by、group by、distinct这些查询的语句，where条件过滤出来的结果集请保持在1000行以内，否则SQL会很慢。</li>
</ol>
<h3 id="225-线上禁止使用的sql语句"><strong>2.2.5 线上禁止使用的SQL语句</strong></h3>
<ol>
<li>【高危】禁用update|delete t1 … where a=XX limit XX; 这种带limit的更新语句。因为会导致主从不一致，导致数据错乱。建议加上order by PK。</li>
<li>【高危】禁止使用关联子查询，如update t1 set … where name in(select name from user where…);效率极其低下。</li>
<li>【强制】禁用procedure、function、trigger、views、event、外键约束。因为他们消耗数据库资源，降低数据库实例可扩展性。推荐都在程序端实现。</li>
<li>【强制】禁用insert into …on duplicate key update…在高并发环境下，会造成主从不一致。</li>
<li>【强制】禁止联表更新语句，如update t1,t2 where t1.id=t2.id…。</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[常用的分布式ID设计方案]]></title>
        <id>https://daxinqqq.github.io/post/chang-yong-de-fen-bu-shi-id-she-ji-fang-an/</id>
        <link href="https://daxinqqq.github.io/post/chang-yong-de-fen-bu-shi-id-she-ji-fang-an/">
        </link>
        <updated>2021-03-11T10:10:16.000Z</updated>
        <content type="html"><![CDATA[<h2 id="分布式id定义">分布式ID定义：</h2>
<ul>
<li>全局唯一，区别于单点系统的唯一，全局要求分布式系统内唯一。</li>
<li>有序性，通常需要保证生成的ID是有序递增的。例如，数据库存储等场景中，有序ID便于确定数据位置，往往更加高效。</li>
</ul>
<h2 id="典型方案">典型方案：</h2>
<ul>
<li>
<p>基于数据库自增序列实现。好处是简单易用，但在扩展性和可靠性等方面存在局限。</p>
</li>
<li>
<p>基于Twitter早期开源的Snowflake的实现，以及相关改动方案。其结构定义：整体长度通常为64（1+41+10+12=64）位，适合使用long类型存储。</p>
<ul>
<li>
<p>头部是1位的正负标识位。</p>
</li>
<li>
<p>紧跟的高位标识是41位时间戳，通常使用System.currentTimeMillis()。</p>
</li>
<li>
<p>后面是10位的workerID，标准定义是5位数据中心+5位机器ID组成了机器编号，以区分不同的机器节点。</p>
</li>
<li>
<p>最后的12位就是单位毫秒内可生成的序列号的数目的理论极限。</p>
</li>
</ul>
</li>
<li>
<p>Redis、Zookeeper、MongoDB等中间件，也都有各种唯一ID解决方案。其中一些设计也可以算作是Snowflake方案的变种。例如，MongoDB的ObjectId提供了一个12 byte（96位）的ID定义，其中32位用于记录以秒为单位的事件，机器ID则为24位，16位用作进程ID，24位随机起始的计数序列。</p>
</li>
<li>
<p>国内大厂开源的一些分布式ID实现。</p>
</li>
</ul>
<p><strong>注：Snowflake并不受冬令时切换影响。Snowflake算法的Java实现，大都是依赖于System.currentTimeMillis()，这个函数会返回当前时间和1970年1月1号UTC事件相差的毫秒数，这个数值与夏/冬令时并没有关系。</strong></p>
<h2 id="扩展">扩展：</h2>
<h3 id="除了唯一和有序分布式系统通常还会额外希望分布式id保证">除了唯一和有序，分布式系统通常还会额外希望分布式ID保证：</h3>
<ul>
<li>有意义，包含更多信息，例如时间、业务等信息。这点和有序性存在一定关联，如果ID中包含时间，本身就可以保证一定的顺序。ID中包含额外信息，在分布式数据存储等场合中，有助于进一步优化数据访问的效率。</li>
<li>高可用性，这是分布式系统的必然要求，上面的方案中，有的是真正意义的分布式，有的还是传统主从的思路，这一点取决于我们业务对扩展性和性能等方面的要求。</li>
<li>紧凑性，ID的大小可能受到实际应用的制约，例如数据库存储往往对长ID不友好，太长的ID会降低Mysql等数据库索引的性能；编程语言在处理时也可能受数据类型长度限制。</li>
</ul>
<p>在具体生产环境中，还有可能提出对QPS等方面的具体要求，尤其是在国内一线大厂的业务规模下，更是需要考虑峰值业务场景的数量级层次要求。</p>
<h3 id="主流方案优缺点分析">主流方案优缺点分析：</h3>
<p>​	对于数据库自增方案，除了实现简单，它生成的ID还能够保证固定步长的递增，使用很方便。</p>
<p>​	但是，每获取一个ID就会触发数据库的写请求，是一个代价高昂的操作，构建高扩展性、高性能解决方案比较复杂，更不要说扩容等场景的难度了。同时，保证数据库高可用性也存在挑战，数据库可能发生宕机，即使采取主从热备等措施，也可能出现ID重复等问题。</p>
<p>​	实际大厂往往构建了多层的复合架构，例如美团公开的数据库方案Leaf-Segment，引入了起到缓存等作用的Leaf层，对数据库操作则是通过数据库中间件提供的批量操作，这样既能保证性能、扩展性，也能保证高可用。但是，这种方案对基础架构层面的要求很多，未必适合普通业务规模的需求。</p>
<p>​	与其相比，Snowflake的好处是算法简单，依赖也很少，生成的序列可预测，性能也非常好，Twetter的峰值超过10w/s。但是，它也存在一些不足：</p>
<ul>
<li>
<p>时钟偏斜问题（Clock Skew）：普通的计算机系统时钟并不能保证长久的一致性，可能发生时钟回拨等问题，这就会导致时间戳不准确，进而产生重复ID。针对这一点，Twetter曾经在文档中建议开启NTP。个人建议可以考虑同时将stepback设置为0，以禁止回调。从设计编码角度考虑，可以缓存历史时间戳，然后在序列生成之前进行校验，针对不合理情况进行重试、等待或报错。</p>
</li>
<li>
<p>序列号的可预测性是把双刃剑，虽然简化了一些工程问题，但很多场景不适合可预测的ID。很容易被黑客猜测并利用。</p>
</li>
<li>
<p>ID设计阶段需要谨慎考虑暴露出的信息。例如，Erlang版本的flake实现基于MAC地址计算WorkerID，在安全敏感的领域往往是不被允许的。</p>
</li>
<li>
<p>从理论上说，类似Snowflake的方案由于时间数据位数的限制，存在与2038年问题相似的理论极限。</p>
</li>
</ul>
]]></content>
    </entry>
</feed>